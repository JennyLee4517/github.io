---
title: "[PS] n3"
date: 2019-10-08 19:50:00 -0400
categories: PS
comments: true

---

* 2019-n-3

```java
import java.util.ArrayList;
import java.util.HashSet;


class Solution {
	static ArrayList<Integer>[] rel;
	static HashSet<Integer> need;
	static int[] real_cook_time;
	
	static int getSteps(int k, int[] cook_times) {
		if(rel[k].size() == 0) {
			return real_cook_time[k] = cook_times[k-1];
		}
		if(real_cook_time[k] != 0) {
			return real_cook_time[k];
		}
		
		int ans = 0;
		
		for(int i = 0 ; i < rel[k].size(); i++) {
			int step = rel[k].get(i);
			need.add(step);
			ans = Math.max(ans,  getSteps(step, cook_times));
		}
		ans += cook_times[k-1];
		real_cook_time[k] = ans;
		return ans;
	}
	
	public int[] solution(int[] cook_times, int[][] order, int k) {
		int n = cook_times.length;
		int m = order.length;
		
		rel = (ArrayList<Integer>[]) new ArrayList[n+1];
		for(int i = 0 ; i <= n ; i++) {
			rel[i] = new ArrayList<Integer>();
		}
		
		for(int i = 0 ; i < m ; i++) {
			rel[order[i][1]].add(order[i][0]);
		}
		
		if(rel[k].size() == 0) {
			int[] answer = new int[2];
			answer[0] = 0;
			answer[1] = cook_times[k-1];
			return answer;
		}
		
		real_cook_time = new int[n+1];
		
		need = new HashSet<>();
		for(int i = 0 ; i < rel[k].size(); i++) {
			getSteps(k, cook_times);
		}
		
		int[] answer = new int[2];
		answer[0] = need.size();
		answer[1] = real_cook_time[k];
		
		return answer;
	}
}

```
